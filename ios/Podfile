# Uncomment the next line to define a global platform for your project
platform :ios, '9.0'

rn_path = '../node_modules/react-native'

target 'hello' do
  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks
  # use_frameworks!

  # Pods for hello
  pod "yoga", :path => rn_path + '/ReactCommon/yoga'

  # Needed by CxxBridge
  pod 'DoubleConversion', :podspec => rn_path + '/third-party-podspecs/DoubleConversion.podspec'
  pod 'GLog', :podspec => rn_path + '/third-party-podspecs/GLog.podspec'
  pod 'Folly', :podspec => rn_path + '/third-party-podspecs/Folly.podspec'

  pod 'React', :subspecs => [
    'Core',
    'DevSupport', # Include this to enable In-App Devmenu if RN >= 0.43
    # Use default
    #'jschelpers',
    #'cxxreact',
    #'BatchedBridge',
    'CxxBridge',
    'ART',
    'RCTActionSheet',
    #'RCTAdSupport',
    'RCTAnimation',
    #'RCTCameraRoll',
    'RCTGeolocation',
    'RCTImage',
    'RCTLinkingIOS',
    'RCTNetwork',
    'RCTPushNotification',
    'RCTSettings',
    'RCTText',
    'RCTVibration',
    'RCTWebSocket',
    'RCTBlob',
    #'RCTTest',
  ], :path => rn_path

  # unofficial Podspec

  target 'hello-tvOSTests' do
    inherit! :search_paths
    # Pods for testing
  end

  target 'helloTests' do
    inherit! :search_paths
    # Pods for testing
  end

end

# Start the React Native JS packager server when running the project in Xcode.

start_packager = %q(
if nc -w 5 -z localhost 8081 ; then
  if ! curl -s "http://localhost:8081/status" | grep -q "packager-status:running" ; then
    echo "Port 8081 already in use, packager is either not running or not running correctly"
    exit 2
  fi
else
  open $SRCROOT/../../node_modules/react-native/packager/launchPackager.command || echo "Can't start packager automatically"
fi
)

post_install do |installer|
  target = installer.pods_project.targets.select{|t| 'React' == t.name}.first
  phase = target.new_shell_script_build_phase('Run Script')
  phase.shell_script = start_packager
end
